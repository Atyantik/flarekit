---
description:
globs:
alwaysApply: true
---
When working with error handling in the backend:

1. Error Class Structure:
- Always extend from BaseError
- Use factory methods for common scenarios
- Include rich context in error constructors

2. Error Types:
- Use AuthenticationError (401) for identity verification failures
- Use AuthorizationError (403) for permission issues
- Use ValidationError (400) for input validation
- Use NotFoundError (404) for missing resources
- Use BusinessLogicError (400) for business rule violations
- Use ExternalServiceError (502) for third-party service issues
- Use DatabaseError (500) for database operations
- Use SystemError (500) for infrastructure issues

3. Error Context:
- Always include relevant IDs and references
- Add operation-specific context
- Include timing information when relevant
- Add debugging information in development

4. Error Patterns:
- Validate early in route handlers
- Use try-catch blocks in service layer
- Preserve error chains when wrapping errors
- Use specific error types over generic ones

5. Security:
- Sanitize error messages in production
- Remove sensitive information
- Use appropriate error visibility
- Follow security best practices

6. Testing:
- Test error properties and context
- Verify error handling middleware
- Test error chaining
- Validate error responses

7. Monitoring:
- Log errors with structured format
- Include request context
- Add correlation IDs
- Track error metrics

@apps/backend/docs/error-handling.md
